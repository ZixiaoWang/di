{"version":3,"file":"index.js","sources":["src/Store/injectable.store.ts","src/Store/instance.store.ts","src/Store/component.store.ts","src/Core/Core.ts","src/Decorators/inject.ts","src/Decorators/injectable.ts","src/Decorators/component.ts"],"sourcesContent":["export class InjectableStore {\r\n\r\n    private set: Set<any>;\r\n\r\n    constructor(){\r\n        this.set = new Set<any>();\r\n    }\r\n\r\n    register(fn: any){\r\n        this.set.add( fn );\r\n    }\r\n\r\n    has(fn: any): boolean{\r\n        return this.set.has( fn );\r\n    }\r\n\r\n}\r\n\r\nexport const INJECTABLE_STORE = new InjectableStore();\r\n\r\n\r\n/**\r\n * Injectable Store\r\n * Data Structure\r\n *      [  ...providers  ]\r\n */","import { ProviderConfig } from \"../Core/Interface\";\r\nimport { instanize } from \"../Core/Core\";\r\nimport { INJECTABLE_STORE } from \"./injectable.store\";\r\n\r\nexport class InstanceStore {\r\n\r\n    private map: Map<any, any>\r\n\r\n    constructor() {\r\n        this.map = new Map<any, any>();\r\n    }\r\n\r\n    add( injectableClassList?: Array<any|ProviderConfig> ): InstanceStore{\r\n        let newMap = this.construct( injectableClassList );\r\n        newMap.forEach((val, key) => {\r\n            this.map.set(key, val);\r\n        });\r\n        return this;\r\n    }\r\n\r\n    assign(instanceStore: InstanceStore): InstanceStore{\r\n        let innerMap = this.map;\r\n        let outterMap = instanceStore.getMap();\r\n        let newMap = new Map();\r\n        let newInstanceStore = new InstanceStore();\r\n\r\n        innerMap.forEach((val, key) => {\r\n            newMap.set(key, val);\r\n        })\r\n        outterMap.forEach((val, key) => {\r\n            newMap.set(key, val);\r\n        })\r\n\r\n        newInstanceStore.setMap(newMap);\r\n        return newInstanceStore;\r\n    }\r\n\r\n    has(token: any): boolean{\r\n        return this.map.has(token);\r\n    }\r\n\r\n    get(token: any): boolean{\r\n        return this.map.get(token);\r\n    }\r\n\r\n    setMap(map: Map<any, any>){ this.map = map; }\r\n    getMap(): Map<any, any> { return this.map; }\r\n\r\n    private construct( injectableClassList?: Array<any|ProviderConfig> ): Map<any, any>{\r\n        let map: Map<any, any> = new Map();\r\n\r\n        if( injectableClassList ){ \r\n            let list = this.reSort( injectableClassList );\r\n\r\n            list.forEach(item => {\r\n                let value;\r\n\r\n                if( INJECTABLE_STORE.has(item.provider) === false ){\r\n                    throw new Error('未能找到可注入类，请用@Injectable()修饰');\r\n                }\r\n\r\n                if( item.useClass ){\r\n                    value = instanize(item.useClass);\r\n                }else if( item.useValue ){\r\n                    value = item.useValue;\r\n                }else if( item.useExistInstance ){\r\n                    value = this.map.get( item.provider );\r\n                }\r\n                map.set( item.provider, value );\r\n            });\r\n        }\r\n\r\n        return map;        \r\n    }\r\n\r\n    private reSort( injectableClassList?: Array<any|ProviderConfig> ): Array<any>{\r\n        let normal = [];\r\n        let useVal = [];\r\n        let useClass = [];\r\n        let useExist = [];\r\n\r\n        if( injectableClassList === undefined || injectableClassList.length === 0 ){\r\n            return [];\r\n        }\r\n\r\n        injectableClassList.forEach(item => {\r\n            if( typeof item === 'function' ) {\r\n                normal.push( { provider: item, useClass: item } );\r\n            }else if( typeof item === 'object' ){\r\n                if(item.useClass){\r\n                    useClass.push(item)\r\n                }else if(item.useValue){\r\n                    useVal.push(item);\r\n                }else if(item.useExistInstance){\r\n                    useExist.push(item);\r\n                }else{\r\n                    console.warn(`${JSON.stringify(item)}未能成功配置，请传入ProviderConfig类型`);\r\n                }\r\n            }else{\r\n                throw new Error(`${item.toString()}不是合法的类型，请传入Function或者ProviderConfig类型`);\r\n            }\r\n        });\r\n\r\n        return normal.concat(useClass, useVal, useExist);\r\n    }\r\n\r\n}\r\n\r\nexport const INSTANCE_STORE = new InstanceStore();\r\n\r\n/**\r\n * Instance Store\r\n * Data Structure\r\n *  [\r\n *      <Provider, instance>,\r\n *      <Provider, instance>,\r\n *      <Provider, instance>\r\n *      ...\r\n *  ]\r\n */","import { ComponentStoreConfig } from \"../Core/Interface\";\r\nimport { InstanceStore } from \"./instance.store\";\r\n\r\nexport class ComponentStore {\r\n\r\n    private map: Map<any, ComponentStoreConfig>;\r\n\r\n    constructor() {\r\n        this.map = new Map<any, ComponentStoreConfig>();\r\n    }\r\n\r\n    has(component: any): boolean {\r\n        return this.map.has(component);\r\n    }\r\n\r\n    add(component: any, config?: ComponentStoreConfig): ComponentStore{\r\n        let componentStoreConfig: ComponentStoreConfig = { priority: 0, restrict: true, instanceStore: new InstanceStore() };\r\n        this.map.set(component, config || componentStoreConfig);\r\n        return this;\r\n    }\r\n\r\n    get(component: any): ComponentStoreConfig {\r\n        return this.map.get(component);\r\n    }\r\n\r\n    getInstanceByType(component: any, paramType: any): any{\r\n        if( this.map.has(component) ){\r\n            let config: ComponentStoreConfig =  this.map.get(component);\r\n            return config.instanceStore.get(paramType);\r\n        }else{\r\n            return null;\r\n        }\r\n    }\r\n\r\n    register(componnet: any, config?: ComponentStoreConfig) {\r\n        let componentStoreConfig: ComponentStoreConfig = { priority: 0, restrict: true, instanceStore: new InstanceStore() };\r\n        this.map.set(componnet, config || componentStoreConfig);\r\n    }\r\n\r\n    update(component: any, config: ComponentStoreConfig) {\r\n        this.map.set(component, config);\r\n    }\r\n\r\n    getLocalInstanceStore(component: any): InstanceStore{\r\n        if( this.map.has(component) && this.map.get(component).instanceStore ) {\r\n            return this.map.get(component).instanceStore;\r\n        }else{\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nexport const COMPONENT_STORE = new ComponentStore();\r\n\r\n/**\r\n * Component Store\r\n * Data Structure\r\n *  [\r\n *      <Component, { priority, localInjector }>,\r\n *      <Component, { priority, localInjector }>,\r\n *      ...\r\n *  ]\r\n */","/// <reference path=\"../../node_modules/reflect-metadata/reflect-metadata.d.ts\" />\r\n\r\nimport 'reflect-metadata';\r\n\r\nimport { ComponentConfig, ComponentStoreConfig } from './Interface';\r\nimport { INJECTABLE_STORE } from '../Store/injectable.store'\r\nimport { INSTANCE_STORE } from '../Store/instance.store';\r\nimport { COMPONENT_STORE } from '../Store/component.store';\r\n\r\nexport function instanize(Fn){\r\n    let args = Reflect.getMetadata('design:paramtypes', Fn) || [];\r\n\r\n    args = args.map(paramType => {\r\n        if( INJECTABLE_STORE.has(paramType) ){\r\n            return instanize(paramType);\r\n        }else{\r\n            throw new Error(`${paramType.name} is not an injectable class, please add @Injectable() to register class`);\r\n        }\r\n    });\r\n\r\n    // let instance = Object.create(Fn.prototype);\r\n    // Fn.apply(instance, args);\r\n    let instance = new Fn(...args);\r\n    return instance;\r\n}\r\n\r\nexport function construct(Fn) {\r\n    let args = Reflect.getMetadata('design:paramtypes', Fn) || [];\r\n    let config: ComponentStoreConfig = COMPONENT_STORE.get(Fn);\r\n\r\n    if( config === undefined ){\r\n        throw new Error(`Cannot construct ${ Fn.name }, please add @Component decorator`);\r\n    }\r\n\r\n    args = args.map(paramType => {\r\n\r\n        // @Inject\r\n        if( config.priority === 2 ){\r\n            let instance = COMPONENT_STORE.getInstanceByType(Fn, paramType);\r\n            if( instance === undefined && config.restrict ){\r\n                throw new Error(`Cannot instanize ${ paramType.name } for ${ Fn.name }, please add ${ paramType.name } to the provider list.`);\r\n            }else if( instance === undefined && !config.restrict ){\r\n                return null\r\n            }else{\r\n                return instance;\r\n            }\r\n        }\r\n\r\n        // @Component\r\n        if( config.priority === 1 ){\r\n            let localInstance = COMPONENT_STORE.getInstanceByType(Fn, paramType);\r\n            let globalInstance = INSTANCE_STORE.get(paramType);\r\n            let instance = localInstance || globalInstance;\r\n            if( instance === undefined && config.restrict ){\r\n                throw new Error(`Cannot instanize ${ paramType.name } for ${ Fn.name }, please add ${ paramType.name } to the provider list.`);\r\n            }else if( instance === undefined && !config.restrict ){\r\n                return null\r\n            }else{\r\n                return instance;\r\n            }\r\n        }\r\n\r\n        // Other\r\n        if( isNaN(config.priority) || config.priority < 1 || config.priority > 2 ){\r\n            throw new Error(`Incorrect config for ${ Fn.name }`);\r\n        }\r\n    });\r\n\r\n    // let componentInstance = Object.create(Fn.prototype);\r\n    // Fn.apply(componentInstance, args);\r\n    let componentInstance = new Fn(...args);\r\n    return componentInstance;\r\n}\r\n\r\nexport function bootstrap(config: ComponentConfig) {\r\n    INSTANCE_STORE.add( config.provider );\r\n}\r\n ","import { InstanceStore } from \"../Store/instance.store\";\r\nimport { COMPONENT_STORE } from '../Store/component.store';\r\nimport { ComponentStoreConfig } from \"../Core/Interface\";\r\n\r\nexport function Inject(...providers){\r\n    return function(target){\r\n        const localInstanceStore: InstanceStore = new InstanceStore().add(providers || []);\r\n        let componentConfig: ComponentStoreConfig = { priority: 2, restrict: true, instanceStore: localInstanceStore };\r\n        COMPONENT_STORE.register(target, componentConfig);\r\n        return target;\r\n    }\r\n}","import { INJECTABLE_STORE } from \"../Store/injectable.store\";\r\n\r\nexport function Injectable(){\r\n    return function(target){\r\n        INJECTABLE_STORE.register(target);\r\n        return target;\r\n    }\r\n}","import { ComponentConfig, ComponentStoreConfig } from '../Core/Interface';\r\nimport { INSTANCE_STORE, InstanceStore } from '../Store/instance.store'\r\nimport { COMPONENT_STORE } from '../Store/component.store';\r\n\r\nexport function Component(componentConfig?: ComponentConfig) {\r\n    return function(target) {\r\n        let strict = false;\r\n        let localInstanceStore: InstanceStore = new InstanceStore();\r\n        if(componentConfig) {\r\n            strict = !!componentConfig.restrict;\r\n            localInstanceStore.add(componentConfig.provider || []);\r\n        }\r\n        let theConfig: ComponentStoreConfig = { priority: 1, restrict: strict, instanceStore: localInstanceStore };\r\n        COMPONENT_STORE.register(target, theConfig);\r\n        return target;\r\n    }\r\n}"],"names":[],"mappings":";;;;;;AAAA;IAII;QACI,IAAI,CAAC,GAAG,GAAG,IAAI,GAAG,EAAO,CAAC;KAC7B;IAED,kCAAQ,GAAR,UAAS,EAAO;QACZ,IAAI,CAAC,GAAG,CAAC,GAAG,CAAE,EAAE,CAAE,CAAC;KACtB;IAED,6BAAG,GAAH,UAAI,EAAO;QACP,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAE,EAAE,CAAE,CAAC;KAC7B;IAEL,sBAAC;CAAA,IAAA;IAEY,gBAAgB,GAAG,IAAI,eAAe,EAAE,CAAC;;;;;GAOnD;;;ICjBC;QACI,IAAI,CAAC,GAAG,GAAG,IAAI,GAAG,EAAY,CAAC;KAClC;IAED,2BAAG,GAAH,UAAK,mBAA+C;QAApD,iBAMC;QALG,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAE,mBAAmB,CAAE,CAAC;QACnD,MAAM,CAAC,OAAO,CAAC,UAAC,GAAG,EAAE,GAAG;YACpB,KAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;SAC1B,CAAC,CAAC;QACH,OAAO,IAAI,CAAC;KACf;IAED,8BAAM,GAAN,UAAO,aAA4B;QAC/B,IAAI,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC;QACxB,IAAI,SAAS,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC;QACvC,IAAI,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC;QACvB,IAAI,gBAAgB,GAAG,IAAI,aAAa,EAAE,CAAC;QAE3C,QAAQ,CAAC,OAAO,CAAC,UAAC,GAAG,EAAE,GAAG;YACtB,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;SACxB,CAAC,CAAA;QACF,SAAS,CAAC,OAAO,CAAC,UAAC,GAAG,EAAE,GAAG;YACvB,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;SACxB,CAAC,CAAA;QAEF,gBAAgB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAChC,OAAO,gBAAgB,CAAC;KAC3B;IAED,2BAAG,GAAH,UAAI,KAAU;QACV,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KAC9B;IAED,2BAAG,GAAH,UAAI,KAAU;QACV,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KAC9B;IAED,8BAAM,GAAN,UAAO,GAAkB,IAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE;IAC7C,8BAAM,GAAN,cAA0B,OAAO,IAAI,CAAC,GAAG,CAAC,EAAE;IAEpC,iCAAS,GAAjB,UAAmB,mBAA+C;QAAlE,iBAyBC;QAxBG,IAAI,GAAG,GAAkB,IAAI,GAAG,EAAE,CAAC;QAEnC,IAAI,mBAAmB,EAAE;YACrB,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAE,mBAAmB,CAAE,CAAC;YAE9C,IAAI,CAAC,OAAO,CAAC,UAAA,IAAI;gBACb,IAAI,KAAK,CAAC;gBAEV,IAAI,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,KAAK,EAAE;oBAC/C,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;iBACjD;gBAED,IAAI,IAAI,CAAC,QAAQ,EAAE;oBACf,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;iBACpC;qBAAK,IAAI,IAAI,CAAC,QAAQ,EAAE;oBACrB,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;iBACzB;qBAAK,IAAI,IAAI,CAAC,gBAAgB,EAAE;oBAC7B,KAAK,GAAG,KAAI,CAAC,GAAG,CAAC,GAAG,CAAE,IAAI,CAAC,QAAQ,CAAE,CAAC;iBACzC;gBACD,GAAG,CAAC,GAAG,CAAE,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAE,CAAC;aACnC,CAAC,CAAC;SACN;QAED,OAAO,GAAG,CAAC;KACd;IAEO,8BAAM,GAAd,UAAgB,mBAA+C;QAC3D,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,IAAI,QAAQ,GAAG,EAAE,CAAC;QAClB,IAAI,QAAQ,GAAG,EAAE,CAAC;QAElB,IAAI,mBAAmB,KAAK,SAAS,IAAI,mBAAmB,CAAC,MAAM,KAAK,CAAC,EAAE;YACvE,OAAO,EAAE,CAAC;SACb;QAED,mBAAmB,CAAC,OAAO,CAAC,UAAA,IAAI;YAC5B,IAAI,OAAO,IAAI,KAAK,UAAU,EAAG;gBAC7B,MAAM,CAAC,IAAI,CAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAE,CAAC;aACrD;iBAAK,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;gBAChC,IAAG,IAAI,CAAC,QAAQ,EAAC;oBACb,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;iBACtB;qBAAK,IAAG,IAAI,CAAC,QAAQ,EAAC;oBACnB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACrB;qBAAK,IAAG,IAAI,CAAC,gBAAgB,EAAC;oBAC3B,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACvB;qBAAI;oBACD,OAAO,CAAC,IAAI,CAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,2FAA4B,CAAC,CAAC;iBACrE;aACJ;iBAAI;gBACD,MAAM,IAAI,KAAK,CAAI,IAAI,CAAC,QAAQ,EAAE,qHAAuC,CAAC,CAAC;aAC9E;SACJ,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;KACpD;IAEL,oBAAC;CAAA,IAAA;IAEY,cAAc,GAAG,IAAI,aAAa,EAAE,CAAC;;;;;;;;;;GAW/C;;;IChHC;QACI,IAAI,CAAC,GAAG,GAAG,IAAI,GAAG,EAA6B,CAAC;KACnD;IAED,4BAAG,GAAH,UAAI,SAAc;QACd,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;KAClC;IAED,4BAAG,GAAH,UAAI,SAAc,EAAE,MAA6B;QAC7C,IAAI,oBAAoB,GAAyB,EAAE,QAAQ,EAAE,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,aAAa,EAAE,EAAE,CAAC;QACrH,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,SAAS,EAAE,MAAM,IAAI,oBAAoB,CAAC,CAAC;QACxD,OAAO,IAAI,CAAC;KACf;IAED,4BAAG,GAAH,UAAI,SAAc;QACd,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;KAClC;IAED,0CAAiB,GAAjB,UAAkB,SAAc,EAAE,SAAc;QAC5C,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;YACzB,IAAI,MAAM,GAA0B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YAC5D,OAAO,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;SAC9C;aAAI;YACD,OAAO,IAAI,CAAC;SACf;KACJ;IAED,iCAAQ,GAAR,UAAS,SAAc,EAAE,MAA6B;QAClD,IAAI,oBAAoB,GAAyB,EAAE,QAAQ,EAAE,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,aAAa,EAAE,EAAE,CAAC;QACrH,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,SAAS,EAAE,MAAM,IAAI,oBAAoB,CAAC,CAAC;KAC3D;IAED,+BAAM,GAAN,UAAO,SAAc,EAAE,MAA4B;QAC/C,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;KACnC;IAED,8CAAqB,GAArB,UAAsB,SAAc;QAChC,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,aAAa,EAAG;YACnE,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,aAAa,CAAC;SAChD;aAAI;YACD,OAAO,IAAI,CAAC;SACf;KACJ;IACL,qBAAC;CAAA,IAAA;IAEY,eAAe,GAAG,IAAI,cAAc,EAAE,CAAC;;;;;;;;;GAUjD;;AC9DH;AAEA,mBAO0B,EAAE;IACxB,IAAI,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,mBAAmB,EAAE,EAAE,CAAC,IAAI,EAAE,CAAC;IAE9D,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,UAAA,SAAS;QACrB,IAAI,gBAAgB,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;YACjC,OAAO,SAAS,CAAC,SAAS,CAAC,CAAC;SAC/B;aAAI;YACD,MAAM,IAAI,KAAK,CAAI,SAAS,CAAC,IAAI,4EAAyE,CAAC,CAAC;SAC/G;KACJ,CAAC,CAAC;;;IAIH,IAAI,QAAQ,QAAO,EAAE,YAAF,EAAE,kBAAI,IAAI,KAAC,CAAC;IAC/B,OAAO,QAAQ,CAAC;CACnB;AAED,mBAA0B,EAAE;IACxB,IAAI,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,mBAAmB,EAAE,EAAE,CAAC,IAAI,EAAE,CAAC;IAC9D,IAAI,MAAM,GAAyB,eAAe,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAE3D,IAAI,MAAM,KAAK,SAAS,EAAE;QACtB,MAAM,IAAI,KAAK,CAAC,sBAAqB,EAAE,CAAC,IAAI,sCAAoC,CAAC,CAAC;KACrF;IAED,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,UAAA,SAAS;;QAGrB,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE;YACvB,IAAI,QAAQ,GAAG,eAAe,CAAC,iBAAiB,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;YAChE,IAAI,QAAQ,KAAK,SAAS,IAAI,MAAM,CAAC,QAAQ,EAAE;gBAC3C,MAAM,IAAI,KAAK,CAAC,sBAAqB,SAAS,CAAC,IAAI,aAAU,EAAE,CAAC,IAAI,qBAAkB,SAAS,CAAC,IAAI,2BAAyB,CAAC,CAAC;aAClI;iBAAK,IAAI,QAAQ,KAAK,SAAS,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;gBAClD,OAAO,IAAI,CAAA;aACd;iBAAI;gBACD,OAAO,QAAQ,CAAC;aACnB;SACJ;;QAGD,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE;YACvB,IAAI,aAAa,GAAG,eAAe,CAAC,iBAAiB,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;YACrE,IAAI,cAAc,GAAG,cAAc,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YACnD,IAAI,QAAQ,GAAG,aAAa,IAAI,cAAc,CAAC;YAC/C,IAAI,QAAQ,KAAK,SAAS,IAAI,MAAM,CAAC,QAAQ,EAAE;gBAC3C,MAAM,IAAI,KAAK,CAAC,sBAAqB,SAAS,CAAC,IAAI,aAAU,EAAE,CAAC,IAAI,qBAAkB,SAAS,CAAC,IAAI,2BAAyB,CAAC,CAAC;aAClI;iBAAK,IAAI,QAAQ,KAAK,SAAS,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;gBAClD,OAAO,IAAI,CAAA;aACd;iBAAI;gBACD,OAAO,QAAQ,CAAC;aACnB;SACJ;;QAGD,IAAI,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,MAAM,CAAC,QAAQ,GAAG,CAAC,IAAI,MAAM,CAAC,QAAQ,GAAG,CAAC,EAAE;YACtE,MAAM,IAAI,KAAK,CAAC,0BAAyB,EAAE,CAAC,IAAO,CAAC,CAAC;SACxD;KACJ,CAAC,CAAC;;;IAIH,IAAI,iBAAiB,QAAO,EAAE,YAAF,EAAE,kBAAI,IAAI,KAAC,CAAC;IACxC,OAAO,iBAAiB,CAAC;CAC5B;AAED,mBAA0B,MAAuB;IAC7C,cAAc,CAAC,GAAG,CAAE,MAAM,CAAC,QAAQ,CAAE,CAAC;CACzC;;;ICxEsB,mBAAY;SAAZ,UAAY,EAAZ,qBAAY,EAAZ,IAAY;QAAZ,8BAAY;;IAC/B,OAAO,UAAS,MAAM;QAClB,IAAM,kBAAkB,GAAkB,IAAI,aAAa,EAAE,CAAC,GAAG,CAAC,SAAS,IAAI,EAAE,CAAC,CAAC;QACnF,IAAI,eAAe,GAAyB,EAAE,QAAQ,EAAE,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,aAAa,EAAE,kBAAkB,EAAE,CAAC;QAC/G,eAAe,CAAC,QAAQ,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;QAClD,OAAO,MAAM,CAAC;KACjB,CAAA;CACJ;;;ICRG,OAAO,UAAS,MAAM;QAClB,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAClC,OAAO,MAAM,CAAC;KACjB,CAAA;CACJ;;mBCHyB,eAAiC;IACvD,OAAO,UAAS,MAAM;QAClB,IAAI,MAAM,GAAG,KAAK,CAAC;QACnB,IAAI,kBAAkB,GAAkB,IAAI,aAAa,EAAE,CAAC;QAC5D,IAAG,eAAe,EAAE;YAChB,MAAM,GAAG,CAAC,CAAC,eAAe,CAAC,QAAQ,CAAC;YACpC,kBAAkB,CAAC,GAAG,CAAC,eAAe,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC;SAC1D;QACD,IAAI,SAAS,GAAyB,EAAE,QAAQ,EAAE,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,aAAa,EAAE,kBAAkB,EAAE,CAAC;QAC3G,eAAe,CAAC,QAAQ,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;QAC5C,OAAO,MAAM,CAAC;KACjB,CAAA;CACJ;;;;;;;;;;;;;;"}